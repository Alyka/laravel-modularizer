<?php

namespace {{ namespace }};

use {{ serviceNamespace }}{{ serviceNameStudly }}\Models\{{ serviceNameStudly }};
use Tests\TestCase;
use Illuminate\Support\Str;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Database\Eloquent\ModelNotFoundException as NotFoundException;

class {{ class }} extends TestCase
{
    use WithFaker, RefreshDatabase;

    public function test_{{ serviceNameSnake }}_can_be_created()
    {
        $data = {{ serviceNameCamel }}Repository()->factory()->raw();

        ${{ serviceNameCamel }} = {{ serviceNameCamel }}Repository()->create($data);

        $response = ${{ serviceNameCamel }} instanceof {{ serviceNameStudly }};

        $this->assertTrue($response);
    }

    public function test_{{ serviceNameSnake }}_can_be_found_and_retrieved()
    {
        ${{ serviceNameCamel }}Id = {{ serviceNameCamel }}Repository()->factory()->create()->id;

        ${{ serviceNameCamel }} = {{ serviceNameCamel }}Repository()->find(${{ serviceNameCamel }}Id);

        $response = ${{ serviceNameCamel }} instanceof {{ serviceNameStudly }};

        $this->assertTrue($response);
    }

    public function test_find_or_fail_function_doesnt_throw_exception_when_{{ serviceNameSnake }}_is_found()
    {
        ${{ serviceNameCamel }}Id = {{ serviceNameCamel }}Repository()->factory()->create()->id;

        ${{ serviceNameCamel }} = {{ serviceNameCamel }}Repository()->findOrFail(${{ serviceNameCamel }}Id);

        $response = ${{ serviceNameCamel }} instanceof {{ serviceNameStudly }};

        $this->assertTrue($response);
    }

    public function test_find_or_fail_function_throws_exception_when_{{ serviceNameSnake }}_is_not_found()
    {
        {{ serviceNameCamel }}Repository()->factory()->create();

        $exceptionWasThrown = false;

        try {
            {{ serviceNameCamel }}Repository()->findOrFail('invalid-{{ serviceNameCamel }}-id');
        }
        catch(NotFoundException $e)
        {
            $exceptionWasThrown = true;
        }

        $this->assertTrue($exceptionWasThrown);
    }

    public function test_{{ serviceNameSnake }}_can_be_updated()
    {
        ${{ serviceNameCamel }} = {{ serviceNameCamel }}Repository()->factory()->create();

        $response = {{ serviceNameCamel }}Repository(${{ serviceNameCamel }})->update([
            'title' => $this->faker->word,
        ]);

        $this->assertTrue($response);
    }

    public function test_{{ serviceNameSnake }}_can_be_deleted()
    {
        ${{ serviceNameCamel }} = {{ serviceNameCamel }}Repository()->factory()->create();

        {{ serviceNameCamel }}Repository(${{ serviceNameCamel }})->delete();

        $response = is_null({{ serviceNameCamel }}Repository()->find(${{ serviceNameCamel }}->id));

        $this->assertTrue($response);
    }

    public function test_{{ serviceNamePluralSnake }}_can_be_paginated()
    {
        $response = {{ serviceNameCamel }}Repository()->paginate();

        $isLengthAwarePaginatory = $response instanceof LengthAwarePaginator;

        $this->assertTrue($isLengthAwarePaginatory);
    }
}

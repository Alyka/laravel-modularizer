<?php

namespace {{ namespace }};

use Omnipay\Omnipay;
use Services\{{ serviceNameStudly }}\Providers\{{ serviceNameStudly }}ServiceProvider;
use Services\Payment\Services\PaymentService;
use {{ serviceNamespace }}{{ serviceNameStudly }}\Contracts\{{ serviceNameStudly }}Service as Contracts{{ serviceNameStudly }}Service;
use Services\Payment\Contracts\PaymentRepository;
use Services\Setting\Contracts\SettingService;
use Services\Order\Contracts\OrderService;
use Services\Cart\Contracts\CartService;

class {{ class }} extends PaymentService implements Contracts{{ serviceNameStudly }}Service
{
    /**
     * The omnipay gateway instance.
     *
     * @var \Omnipay\Common\GatewayInterface
     */
    protected $gateway;

    /**
     * Create new instance of {{ serviceNameStudly }}Service.
     *
     * @param PaymentRepository $repository
     * @param SettingService $settingService
     * @param OrderService $orderService
     * @param CartService $cartService
     * @return void
     */
    public function __construct(
        PaymentRepository $repository,
        SettingService $settingService,
        OrderService $orderService,
        CartService $cartService
    ) {
        parent::__construct($repository, $settingService, $orderService, $cartService);
        $this->gateway = Omnipay::create('');
    }

    /**
     * @inheritDoc
     */
    public function index($requestAttributes)
    {
        $requestAttributes['method'] = {{ serviceNameStudly }}ServiceProvider::NAME;
        return parent::index($requestAttributes);
    }

    /**
     * @inheritDoc
     */
    public function process($id, $requestAttributes)
    {
        return $this->repository->update([
            'method' => {{ serviceNameStudly }}ServiceProvider::NAME
        ], $id);
    }

    /**
     * @inheritDoc
     */
    public function verify($id)
    {

    }

    /**
     * @inheritDoc
     */
    public function cancel($id)
    {
        if (! currentUser()->is_admin) {
            abort(402, trans('core::payment.unauthorized'));
        }

        return $this->nullify($id);
    }

    /**
     * @inheritDoc
     */
    public function saveSettings($requestAttributes)
    {
        $this->settingService->add(
            siteSetting(),
            $requestAttributes,
            {{ serviceNameStudly }}ServiceProvider::NAME
        );
    }

    /**
     * @inheritDoc
     */
    public function getSettings()
    {
        $data = [
            'enabled' => !! siteSetting('enabled', {{ serviceNameStudly }}ServiceProvider::NAME),
        ];

        return $this->makeSettingModel($data);
    }
}
